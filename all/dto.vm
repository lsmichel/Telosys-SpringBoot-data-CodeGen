##----------------------------------------------------------------------------------------------------
## JPA beans suffix
##set ( $env.entityClassNameSuffix = "Dto" )
#set ( $dto = ${entity.name} + "Dto" )
#set ( $listOfForeignAttrib = ["code", "name", "firstName", "lastName", "libelle", "intitule", "login", "nom", "prenoms", "prenom", "denomination", "codeGroupe", "libelleGroupe", "raisonSociale"])

/*
 * Java dto for entity table ${entity.databaseTable} 
 * Created on $today.date ( Time $today.time )
 * Generator tool : $generator.name ( version $generator.version )
 * Copyright 2018 Geo. All Rights Reserved.
 */

package ${target.javaPackageFromFolder(${SRC})};

#foreach( $import in $java.imports($entity) )
import $import;
#end
#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import ${ROOT_PKG}.utils.contract.*;
import ${ROOT_PKG}.utils.dto.customize._${dto};

/**
 * DTO for table "${entity.databaseTable}"
 *
 * @author Geo
 */
@JsonInclude(Include.NON_NULL)
@JsonPropertyOrder(alphabetic = true)
public class ${dto} extends _${dto} implements Cloneable{

#foreach( $field in $entity.keyAttributes )
	/*
	 * $field.databaseComment
	 */
    private $field.formattedType(10) $field.formattedName(20) #if($field.hasInitialValue())= ${field.initialValue} #end; // Primary Key
#end

#foreach( $field in $entity.nonKeyAttributes )
#if ( !$field.isTimestampType() )
	/*
	 * $field.databaseComment
	 */
    private $field.formattedType(10) $field.formattedName(20) #if($field.hasInitialValue())= ${field.initialValue} #end;
#else
#set ( $padderString = "" )
	/*
	 * $field.databaseComment
	 */
	private $padderString.format("%-10s", "String") $field.formattedName(20) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end
#end

    //----------------------------------------------------------------------
    // ENTITY LINKS FIELD ( RELATIONSHIP )
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
##--------------------
#foreach($attrib in $entityFk.attributes)
#set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
#if($listOfForeignAttrib.indexOf($attrib.name) != -1)
	private String $currentLinkField;
#end
#end
##--------------------
#end
#end

##    //----------------------------------------------------------------------
##    // ENTITY LINKS ( RELATIONSHIP )
##    //----------------------------------------------------------------------
#### #foreach( $link in $entity.links )
###foreach( $link in $entity.selectedLinks )
##    private ${link.formattedFieldType(0)} $link.formattedFieldName(12);
###end

	// Search param
#foreach( $field in $entity.attributes)
#set ( $padderString = "" )
#if($field.isTimestampType())
	#set ( $searchParamType = "SearchParam<String>" )
#else
	#set ( $searchParamType = "SearchParam<" + $fn.capitalize($field.type) + ">" )
#end
#set ( $searchParamName = ${field.name} + "Param" )
	private $padderString.format("%-22s%-22s%-22s", $searchParamType, $searchParamName, ";")
#end
##-------------------------------------------------------------------BEGIN
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
##--------------------
#foreach($attrib in $entityFk.attributes)
#set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
#if($listOfForeignAttrib.indexOf($attrib.name) != -1)
#set ( $padderString = "" )
#if($attrib.isTimestampType())
	#set ( $searchParamType = "SearchParam<String>" )
#end
#if(!$attrib.isTimestampType())
	#set ( $searchParamType = "SearchParam<" + ${attrib.type}+ ">" )
#end
#set ( $searchParamName = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" + "Param" )
	private $padderString.format("%-22s%-22s%-22s", $searchParamType, $searchParamName, ";")
#end
#end
##--------------------
#end
#end
##-------------------------------------------------------------------END
    /**
     * Default constructor
     */
    public ${dto}()
    {
        super();
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )
    /**
     * Set the "$field.name" field value
     * @param $field.name
     */
    public void ${field.setter}( $field.type $field.name ){
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )
    /**
     * $field.databaseComment
     * @return the field value
     */
    public $field.type ${field.getter}(){
        return this.$field.name;
    }
#end

#end

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.nonKeyAttributes )
#if ( $field.setter )    
    /**
     * Set the "$field.name" field value
     * @param $field.name
     */
#if ( !$field.isTimestampType() )
	public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
#else
	public void ${field.setter}( String $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#end
#if ( $field.getter )    
    /**
     * $field.databaseComment
     * @return the field value
     */
#if ( !$field.isTimestampType() ) 
	public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#else
	public String ${field.getter}()
    {
        return this.$field.name;
    }
#end
#end

#end

## #macro( foreach_foreign_field_in_seleected_link $current_entity )
## ##---------start macro-----------
## 
## ##---------end macro-------------
## #end
## 
## #macro( create_getter_setter_for_links_field $current_entity )
## #foreach( $link in $entity.selectedLinks )
## #if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
## #set( $entityFk = $link.targetEntity)
## ##--------------------
## #foreach($attrib in $entityFk.attributes)
## #set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
## #if($listOfForeignAttrib.indexOf($attrib.name) != -1)
## 	public String get$fn.capitalize($currentLinkField)()
##     {
##         return this.$currentLinkField;
##     }
## 	public void set$fn.capitalize($currentLinkField)(String $currentLinkField)
##     {
##         this.$currentLinkField = $currentLinkField;
##     }
## 
## #end
## #end
## ##--------------------
## #end
## #end
## #end
## 
## #create_getter_setter_for_links_field ($entity)

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS FIELD ( RELATIONSHIP )
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
##--------------------
#foreach($attrib in $entityFk.attributes)
#set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
#if($listOfForeignAttrib.indexOf($attrib.name) != -1)
	public String get$fn.capitalize($currentLinkField)()
    {
        return this.$currentLinkField;
    }
	public void set$fn.capitalize($currentLinkField)(String $currentLinkField)
    {
        this.$currentLinkField = $currentLinkField;
    }

#end
#end
##--------------------
#end
#end
##    //----------------------------------------------------------------------
##    // GETTERS & SETTERS FOR LINKS
##    //----------------------------------------------------------------------
#### #foreach( $link in $entity.links )
###foreach( $link in $entity.selectedLinks )
###if ( $link.setter )    public void ${link.setter}( ${link.formattedFieldType(0)} ${link.formattedFieldName(0)} ) {
##        this.${link.formattedFieldName(0)} = ${link.formattedFieldName(0)};
##    }
###end
###if ( $link.getter )    public ${link.formattedFieldType(0)} ${link.getter}() {
##        return this.${link.formattedFieldName(0)};
##    }
###end
##
###end

	//----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR SEARCH PARAM FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.attributes)
#set ( $padderString = "" )
#if($field.isTimestampType())
	#set ( $searchParamType = "SearchParam<String>" )
#else
	#set ( $searchParamType = "SearchParam<" + $fn.capitalize($field.type) + ">" )
#end
#set ( $searchParamName = ${field.name} + "Param" )
#set ( $searchParamGetter = ${field.getter} + "Param" )
#set ( $searchParamSetter = ${field.setter} + "Param" )
	/**
     * Get the "$searchParamName" field value
     * @return the field value
     */	
	public $searchParamType $searchParamGetter(){
		return this.$searchParamName;
	}
	/**
     * Set the "$searchParamName" field value
     * @param $searchParamName
     */
    public void ${searchParamSetter}( $searchParamType $searchParamName ){
        this.$searchParamName = $searchParamName;
    }

#end
##-------------------------------------------------------------------BEGIN
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
##--------------------
#foreach($attrib in $entityFk.attributes)
#set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
#if($listOfForeignAttrib.indexOf($attrib.name) != -1)
#set ( $padderString = "" )
#if($attrib.isTimestampType())
	#set ( $searchParamType = "SearchParam<String>" )
#else
	#set ( $searchParamType = "SearchParam<" + ${attrib.type}+ ">" )
#end
#set ( $currentLinkFieldGetter = "get" + $fn.capitalize($currentLinkField))
#set ( $currentLinkFieldSetter = "set" + $fn.capitalize($currentLinkField))
#set ( $searchParamName = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" + "Param" )
#set ( $searchParamGetter = ${currentLinkFieldGetter} + "Param" )
#set ( $searchParamSetter = ${currentLinkFieldSetter} + "Param" )
		/**
     * Get the "$searchParamName" field value
     * @return the field value
     */	
	public $searchParamType $searchParamGetter(){
		return this.$searchParamName;
	}
	/**
     * Set the "$searchParamName" field value
     * @param $searchParamName
     */
    public void ${searchParamSetter}( $searchParamType $searchParamName ){
        this.$searchParamName = $searchParamName;
    }

#end
#end
##--------------------
#end
#end
##-------------------------------------------------------------------END

	//----------------------------------------------------------------------
    // equals METHOD
    //----------------------------------------------------------------------
$java.equalsMethod($dto, $entity.keyAttributes )
	//----------------------------------------------------------------------
    // clone METHOD
    //----------------------------------------------------------------------
	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
##$java.toStringMethod($entity, $dataFields, "compositePrimaryKey", 4)
    public String toString() {
		StringBuffer sb = new StringBuffer(); 
#set( $count = 0 )
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_IN_SELECTED_LINKS ) )
#if( $count > 0 )
		sb.append("|"); 
#end
		sb.append($field.name); 
#set( $count = $count + 1 )
#end  
        return sb.toString();
    }
}
