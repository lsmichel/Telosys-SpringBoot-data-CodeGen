##----------------------------------------------------------------------------------------------------
## JPA beans suffix
#set ( $userEntity = "User" )
#set ( $userBusiness = ${userEntity} + "Business" )
#set ( $globalDbName = "domotique_db" )
#set ( $tenantEntityName = "SmartBox" )
#set ( $tenantEntityRepository =  $tenantEntityName + "Repository")
#set ( $tenantEntityBusiness = ${tenantEntityName} + "Business")
#set ( $isGlobalDb = $entity.databaseCatalog == $globalDbName)

#set ( $listOfUNiqueAttrib = ["code", "name", "libelle", "intitule", "login", "userName", "email", "numero", "matricule", "numeroBagde", "badge", "denomination","reference"])

#set ( $dto = ${entity.name} + "Dto" )
#set ( $businessName = ${entity.name} + "Business" )
#set ( $repositoryName = ${entity.name} + "Repository" )
#set ( $transformerName = ${entity.name} + "Transformer" )
#set ( $listOfRepository = [])
#set ( $listOfBusiness = [])
#set ( $tmp = $listOfRepository.add($fn.uncapitalize(${repositoryName})))

#set ( $userRepositoryName = ${userEntity} + "Repository" )
#set ( $userRepositoryFieldName = $fn.uncapitalize(${userRepositoryName}) )

#set ( $listOfUserEditorField = ["createdBy", "updatedBy", "deletedBy"])
#set ( $hasUserEditorField = false )
#foreach( $field in $entity.attributes )
    #if( $listOfUserEditorField.contains($field.name) )
        #set ( $hasUserEditorField = true )
    #end
#end
#set ( $listOfDeletedField = ["isDeleted", "deleted"])
#set ($hasDeletedField = false)
#foreach($field in $entity.attributes)
	#if($listOfDeletedField.contains($field.name))
		#set ($hasDeletedField = true)
	#end
#end

#set ($entity_name = ${fn.toUpperCase($entity.databaseTable)})

/*
 * Java transformer for entity table ${entity.databaseTable} 
 * Created on $today.date ( Time $today.time )
 * Generator tool : $generator.name ( version $generator.version )
 * Copyright 2018 Geo. All Rights Reserved.
 */

package ${target.javaPackageFromFolder(${SRC})};

import org.apache.commons.lang3.StringUtils;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;

import javax.persistence.PersistenceContext;
import javax.persistence.EntityManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.dao.PermissionDeniedDataAccessException;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import ${ROOT_PKG}.utils.*;
import ${ROOT_PKG}.utils.dto.*;
import ${ROOT_PKG}.utils.enums.*;
import ${ROOT_PKG}.utils.contract.*;
import ${ROOT_PKG}.utils.contract.IBasicBusiness;
import ${ROOT_PKG}.utils.contract.Request;
import ${ROOT_PKG}.utils.contract.Response;
import ${ROOT_PKG}.utils.dto.transformer.*;
import ${ENTITY_PKG}.${entity.name};
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
import ${ENTITY_PKG}.${link.fieldType};
#end
#end
import ${ENTITY_PKG}.*;
import ${ROOT_PKG}.dao.repository.*;

/**
BUSINESS for table "${entity.databaseTable}"
 * 
 * @author Geo
 *
 */
@Component
public class ${businessName} implements IBasicBusiness<Request<${entity.name}Dto>, Response<${entity.name}Dto>> {

	private Response<${entity.name}Dto> response;
	@Autowired
	private ${repositoryName} $fn.uncapitalize(${repositoryName});
#if ($entity.name != $userEntity)
#set($tmp = $listOfRepository.add($userRepositoryFieldName))
	@Autowired
	private $userRepositoryName $userRepositoryFieldName;
#end
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set($currentRepository =  ${fn.uncapitalize($link.fieldName)} + "Repository")
#if(!$listOfRepository.contains($currentRepository))
#set($tmp = $listOfRepository.add($currentRepository))
	@Autowired
	private ${link.fieldType}Repository $currentRepository;
#end
#end
#if($link.isCardinalityOneToMany() || $link.isCardinalityManyToMany())
#set( $entityFk = $link.targetEntity)
#set($currentRepository =  ${fn.uncapitalize($entityFk.name)} + "Repository")
#if(!$listOfRepository.contains($currentRepository))
#set($tmp = $listOfRepository.add($currentRepository))
	@Autowired
	private ${entityFk.name}Repository ${fn.uncapitalize($entityFk.name)}Repository;
#end
#end
#end

#if ($entity.name != $userEntity)
    @Autowired
    private ${userBusiness} ${fn.uncapitalize($userBusiness)};
#end

	@Autowired
	private FunctionalError functionalError;
	@Autowired
	private TechnicalError technicalError;
	@Autowired
	private ExceptionUtils exceptionUtils;
	@PersistenceContext
	private EntityManager em;

	private Logger slf4jLogger;
	private SimpleDateFormat dateFormat;
	private SimpleDateFormat dateTimeFormat;

	public ${businessName}() {
		dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		dateTimeFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		slf4jLogger = LoggerFactory.getLogger(getClass());
	}

#if( ${businessName} == ${tenantEntityBusiness} )
	public ${tenantEntityName}Dto getTenant(String code) throws ParseException {
		${tenantEntityName} entity = ${fn.uncapitalize($tenantEntityRepository)}.findByCode(code, false);
		return ${tenantEntityName}Transformer.INSTANCE.toDto(entity);
	}
#end
	
	/**
	 * create ${entity.name} by using ${dto} as object.
	 * 
	 * @param request
	 * @return response
	 * 
	 */
	@SuppressWarnings("unused")
	@Transactional(rollbackFor = { RuntimeException.class, Exception.class })
	@Override
	public Response<${entity.name}Dto> create(Request<${entity.name}Dto> request, Locale locale)  {
		slf4jLogger.info("----begin create ${entity.name}-----");
		
		response = new Response<${entity.name}Dto>();
		
		try {
			Map<String, java.lang.Object> fieldsToVerifyUser = new HashMap<String, java.lang.Object>();
			fieldsToVerifyUser.put("user", request.getUser());
			if (!Validate.RequiredValue(fieldsToVerifyUser).isGood()) {
				response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
				response.setHasError(true);
				return response;
			}

#if( $entity.name != $userEntity)
			Response<${userEntity}Dto> userResponse = ${fn.uncapitalize($userBusiness)}.isGranted(request.getUser(), FunctionalityEnum.CREATE_${entity_name}.getValue(), locale);
#else
			Response<${userEntity}Dto> userResponse = isGranted(request.getUser(), FunctionalityEnum.CREATE_${entity_name}.getValue(), locale);
#end
			if (userResponse.isHasError()) {
				response.setHasError(true);
				response.setStatus(userResponse.getStatus());
				return response;
			}
			
			List<${entity.name}> items = new ArrayList<${entity.name}>();
			
			for (${dto} dto : request.getDatas()) {
				// Definir les parametres obligatoires
				Map<String, java.lang.Object> fieldsToVerify = new HashMap<String, java.lang.Object>();
#foreach( $field in $entity.keyAttributes )
#if( $field.isStringType() )
				fieldsToVerify.put("${field.name}", dto.${field.getter}());
#end
#end
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY ) )
#if( $field.name != "createdAt" && $field.name != "updatedAt" && $field.name != "createdBy" && $field.name != "updatedBy" && !$listOfDeletedField.contains($field.name))
				fieldsToVerify.put("${field.name}", dto.${field.getter}());
#end
#end
				if (!Validate.RequiredValue(fieldsToVerify).isGood()) {
					response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
					response.setHasError(true);
					return response;
				}

				// Verify if ${fn.uncapitalize($entity.name)} to insert do not exist
				${entity.name} existingEntity = null;
#foreach( $field in $entity.keyAttributes )
#if( $field.isStringType() )
				existingEntity = ${fn.uncapitalize($repositoryName)}.findOne(dto.${field.getter}()#foreach( $attrib in $entity.nonKeyAttributes )#if( $listOfDeletedField.contains($attrib.name) ), false#end#end);
				if (existingEntity != null) {
					response.setStatus(functionalError.DATA_EXIST("${fn.uncapitalize($entity.name)} ${field.name} -> " + dto.${field.getter}(), locale));
					response.setHasError(true);
					return response;
				}
#end
#if( !$field.isStringType() )
				if (existingEntity != null) {
					response.setStatus(functionalError.DATA_EXIST("${fn.uncapitalize($entity.name)} ${field.name} -> " + dto.${field.getter}(), locale));
					response.setHasError(true);
					return response;
				}

#end
#end
#foreach( $field in $entity.nonKeyAttributes )
#if($listOfUNiqueAttrib.contains($field.name))
				// verif unique $field.name in db
				existingEntity = ${fn.uncapitalize($repositoryName)}.findBy$fn.capitalize($field.name)(dto.${field.getter}()#foreach( $attrib in $entity.nonKeyAttributes )#if( $listOfDeletedField.contains($attrib.name) ), false#end#end);
				if (existingEntity != null) {
					response.setStatus(functionalError.DATA_EXIST("${fn.uncapitalize($entity.name)} ${field.name} -> " + dto.${field.getter}(), locale));
					response.setHasError(true);
					return response;
				}
				// verif unique $field.name in items to save
				if (items.stream().anyMatch(a -> a.${field.getter}().equalsIgnoreCase(dto.${field.getter}()))) {
					response.setStatus(functionalError.DATA_DUPLICATE(" $field.name ", locale));
					response.setHasError(true);
					return response;
				}

#end
#end
## begin foreach
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
#foreach($joinColumn in $link.joinColumns)
#set( $refFieldName = $entity.getAttributeByColumnName($joinColumn.name) )
#end
				// Verify if ${fn.uncapitalize($link.fieldName)} exist
				${link.fieldType} existing$fn.capitalize(${link.fieldName}) = ${fn.uncapitalize($link.fieldName)}Repository.findOne(dto.get${fn.capitalize($refFieldName.name)}()#foreach( $attribFk in $entityFk.nonKeyAttributes )#if( $listOfDeletedField.contains($attribFk.name) ), false#end#end);
				if (existing$fn.capitalize(${link.fieldName}) == null) {
					response.setStatus(functionalError.DATA_NOT_EXIST("${fn.uncapitalize($link.fieldName)} $refFieldName.name -> " + dto.get${fn.capitalize($refFieldName.name)}(), locale));
					response.setHasError(true);
					return response;
				}

#end
#end
## end foreach
				${entity.name} entityToSave = null;
				entityToSave = ${transformerName}.INSTANCE.toEntity(dto#foreach($link in ${entity.selectedLinks})#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne()), existing$fn.capitalize(${link.fieldName})#end#end);
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_LINKS ))
#if( $field.name == "createdAt" )
				entityToSave.${field.setter}(Utilities.getCurrentDate());
#elseif( $field.name == "createdBy" )
				entityToSave.${field.setter}(request.getUser());
#elseif( $listOfDeletedField.contains($field.name) )
				entityToSave.${field.setter}(false);
#end
#end
				items.add(entityToSave);
			}

			if (!items.isEmpty()) {
				List<${entity.name}> itemsSaved = null;
				// inserer les donnees en base de donnees
				itemsSaved = ${fn.uncapitalize($repositoryName)}.saveAll((Iterable<${entity.name}>) items);
				if (itemsSaved == null) {
					response.setStatus(functionalError.SAVE_FAIL("${fn.uncapitalize($entity.name)}", locale));
					response.setHasError(true);
					return response;
				}
				List<${dto}> itemsDto = (Utilities.isTrue(request.getIsSimpleLoading())) ? ${transformerName}.INSTANCE.toLiteDtos(itemsSaved) : ${transformerName}.INSTANCE.toDtos(itemsSaved);
				
				final int size = itemsSaved.size();
				List<String>  listOfError      = Collections.synchronizedList(new ArrayList<String>());
				itemsDto.parallelStream().forEach(dto -> {
					try {
						dto = getFullInfos(dto, size, request.getIsSimpleLoading(), locale);
					} catch (Exception e) {
						listOfError.add(e.getMessage());
						e.printStackTrace();
					}
				});
				if (Utilities.isNotEmpty(listOfError)) {
					Object[] objArray = listOfError.stream().distinct().toArray();
					throw new RuntimeException(StringUtils.join(objArray, ", "));
				}
				response.setItems(itemsDto);
				response.setHasError(false);
			}

			slf4jLogger.info("----end create ${entity.name}-----");
		} catch (PermissionDeniedDataAccessException e) {
			exceptionUtils.PERMISSION_DENIED_DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (DataAccessResourceFailureException e) {
			exceptionUtils.DATA_ACCESS_RESOURCE_FAILURE_EXCEPTION(response, locale, e);
		} catch (DataAccessException e) {
			exceptionUtils.DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		} finally {
			if (response.isHasError() && response.getStatus() != null) {
				slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
				throw new RuntimeException(response.getStatus().getCode() + ";" + response.getStatus().getMessage());
			}
		}
		return response;
	}

	/**
	 * update ${entity.name} by using ${dto} as object.
	 * 
	 * @param request
	 * @return response
	 * 
	 */
	@SuppressWarnings("unused")
	@Transactional(rollbackFor = { RuntimeException.class, Exception.class })
	@Override
	public Response<${entity.name}Dto> update(Request<${entity.name}Dto> request, Locale locale)  {
		slf4jLogger.info("----begin update ${entity.name}-----");
		
		response = new Response<${entity.name}Dto>();
		
		try {
			Map<String, java.lang.Object> fieldsToVerifyUser = new HashMap<String, java.lang.Object>();
			fieldsToVerifyUser.put("user", request.getUser());
			if (!Validate.RequiredValue(fieldsToVerifyUser).isGood()) {
				response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
				response.setHasError(true);
				return response;
			}

#if( $entity.name != $userEntity)
			Response<${userEntity}Dto> userResponse = ${fn.uncapitalize($userBusiness)}.isGranted(request.getUser(), FunctionalityEnum.UPDATE_${entity_name}.getValue(), locale);
#else
			Response<${userEntity}Dto> userResponse = isGranted(request.getUser(), FunctionalityEnum.UPDATE_${entity_name}.getValue(), locale);
#end
			if (userResponse.isHasError()) {
				response.setHasError(true);
				response.setStatus(userResponse.getStatus());
				return response;
			}

			List<${entity.name}> items = new ArrayList<${entity.name}>();
			
			for (${dto} dto : request.getDatas()) {
				// Definir les parametres obligatoires
				Map<String, java.lang.Object> fieldsToVerify = new HashMap<String, java.lang.Object>();
#foreach( $field in $entity.getAttributesByCriteria( $const.KEY, $const.NOT_IN_SELECTED_LINKS ) )
#if( $field.name != "createdAt" && $field.name != "updatedAt" && !$listOfDeletedField.contains($field.name) )
				fieldsToVerify.put("${field.name}", dto.${field.getter}());
#end
#end
				if (!Validate.RequiredValue(fieldsToVerify).isGood()) {
					response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
					response.setHasError(true);
					return response;
				}

				// Verifier si la ${fn.uncapitalize($entity.name)} existe
				${entity.name} entityToSave = null;
#foreach( $field in $entity.keyAttributes )
				entityToSave = ${fn.uncapitalize($repositoryName)}.findOne(dto.${field.getter}()#foreach( $attrib in $entity.nonKeyAttributes )#if( $listOfDeletedField.contains($attrib.name) ), false#end#end);
				if (entityToSave == null) {
					response.setStatus(functionalError.DATA_NOT_EXIST("${fn.uncapitalize($entity.name)} ${field.name} -> " + dto.${field.getter}(), locale));
					response.setHasError(true);
					return response;
				}
#end

#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
#foreach($joinColumn in $link.joinColumns)
#set( $refFieldName = $entity.getAttributeByColumnName($joinColumn.name) )
#set( $refFieldGetter = "get" + ${fn.capitalize($refFieldName.name)} + "()" )
#end
				// Verify if ${fn.uncapitalize($link.fieldName)} exist
#if( $refFieldName.isNumberType() )
				if (dto.${refFieldGetter} != null && dto.${refFieldGetter} > 0){
#else
				if (Utilities.notBlank(dto.${refFieldGetter})){
#end
					${link.fieldType} existing$fn.capitalize(${link.fieldName}) = ${fn.uncapitalize($link.fieldName)}Repository.findOne(dto.${refFieldGetter}#foreach( $attribFk in $entityFk.nonKeyAttributes )#if( $listOfDeletedField.contains($attribFk.name) ), false#end#end);
					if (existing$fn.capitalize(${link.fieldName}) == null) {
						response.setStatus(functionalError.DATA_NOT_EXIST("${fn.uncapitalize($link.fieldName)} $refFieldName.name -> " + dto.${refFieldGetter}, locale));
						response.setHasError(true);
						return response;
					}
					entityToSave.set$fn.capitalize(${link.fieldName})(existing$fn.capitalize(${link.fieldName}));
				}
#end
#end
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_LINKS ) )
#if( $field.name != "createdAt" && $field.name != "updatedAt" && !$listOfDeletedField.contains($field.name) )
#if( $field.isNumberType() )
				if (dto.${field.getter}() != null && dto.${field.getter}() > 0) {
					entityToSave.${field.setter}(dto.${field.getter}());
				}
#end
#if( $field.isStringType() )
				if (Utilities.notBlank(dto.${field.getter}())) {
					entityToSave.${field.setter}(dto.${field.getter}());
				}
#end
#if( $field.isTimestampType() )
				if (Utilities.notBlank(dto.${field.getter}())) {
					entityToSave.${field.setter}(dateFormat.parse(dto.${field.getter}()));
				}
#end
#if( !$field.isStringType() && !$field.isNumberType() && !$field.isTimestampType() && $field.type != "boolean" )
				if (dto.${field.getter}() != null) {
					entityToSave.${field.setter}(dto.${field.getter}());
				}
#end
#end		
#end
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_LINKS ))
#if( $field.name == "updatedAt" )
				entityToSave.${field.setter}(Utilities.getCurrentDate());
#end
#if( $field.name == "updatedBy" )
				entityToSave.${field.setter}(request.getUser());
#end
#end
				items.add(entityToSave);
			}

			if (!items.isEmpty()) {
				List<${entity.name}> itemsSaved = null;
				// maj les donnees en base
				itemsSaved = ${fn.uncapitalize($repositoryName)}.saveAll((Iterable<${entity.name}>) items);
				if (itemsSaved == null) {
					response.setStatus(functionalError.SAVE_FAIL("${fn.uncapitalize($entity.name)}", locale));
					response.setHasError(true);
					return response;
				}
				List<${dto}> itemsDto = (Utilities.isTrue(request.getIsSimpleLoading())) ? ${transformerName}.INSTANCE.toLiteDtos(itemsSaved) : ${transformerName}.INSTANCE.toDtos(itemsSaved);

				final int size = itemsSaved.size();
				List<String>  listOfError      = Collections.synchronizedList(new ArrayList<String>());
				itemsDto.parallelStream().forEach(dto -> {
					try {
						dto = getFullInfos(dto, size, request.getIsSimpleLoading(), locale);
					} catch (Exception e) {
						listOfError.add(e.getMessage());
						e.printStackTrace();
					}
				});
				if (Utilities.isNotEmpty(listOfError)) {
					Object[] objArray = listOfError.stream().distinct().toArray();
					throw new RuntimeException(StringUtils.join(objArray, ", "));
				}
				response.setItems(itemsDto);
				response.setHasError(false);
			}

			slf4jLogger.info("----end update ${entity.name}-----");
		} catch (PermissionDeniedDataAccessException e) {
			exceptionUtils.PERMISSION_DENIED_DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (DataAccessResourceFailureException e) {
			exceptionUtils.DATA_ACCESS_RESOURCE_FAILURE_EXCEPTION(response, locale, e);
		} catch (DataAccessException e) {
			exceptionUtils.DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		} finally {
			if (response.isHasError() && response.getStatus() != null) {
				slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
				throw new RuntimeException(response.getStatus().getCode() + ";" + response.getStatus().getMessage());
			}
		}
		return response;
	}

	/**
	 * delete ${entity.name} by using ${dto} as object.
	 * 
	 * @param request
	 * @return response
	 * 
	 */
	@SuppressWarnings("unused")
	@Transactional(rollbackFor = { RuntimeException.class, Exception.class })
	@Override
	public Response<${entity.name}Dto> delete(Request<${entity.name}Dto> request, Locale locale)  {
		slf4jLogger.info("----begin delete ${entity.name}-----");
		
		response = new Response<${entity.name}Dto>();
		
		try {

			Map<String, java.lang.Object> fieldsToVerifyUser = new HashMap<String, java.lang.Object>();
			fieldsToVerifyUser.put("user", request.getUser());
			if (!Validate.RequiredValue(fieldsToVerifyUser).isGood()) {
				response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
				response.setHasError(true);
				return response;
			}

#if( $entity.name != $userEntity)
			Response<${userEntity}Dto> userResponse = ${fn.uncapitalize($userBusiness)}.isGranted(request.getUser(), FunctionalityEnum.DELETE_${entity_name}.getValue(), locale);
#else
			Response<${userEntity}Dto> userResponse = isGranted(request.getUser(), FunctionalityEnum.DELETE_${entity_name}.getValue(), locale);
#end
			if (userResponse.isHasError()) {
				response.setHasError(true);
				response.setStatus(userResponse.getStatus());
				return response;
			}

			List<${entity.name}> items = new ArrayList<${entity.name}>();
			
			for (${dto} dto : request.getDatas()) {
				// Definir les parametres obligatoires
				Map<String, java.lang.Object> fieldsToVerify = new HashMap<String, java.lang.Object>();
#foreach( $field in $entity.keyAttributes )
				fieldsToVerify.put("${field.name}", dto.${field.getter}());
#end
				if (!Validate.RequiredValue(fieldsToVerify).isGood()) {
					response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
					response.setHasError(true);
					return response;
				}

				// Verifier si la ${fn.uncapitalize($entity.name)} existe
				${entity.name} existingEntity = null;
#foreach( $field in $entity.keyAttributes )
				existingEntity = ${fn.uncapitalize($repositoryName)}.findOne(dto.${field.getter}()#foreach( $attrib in $entity.nonKeyAttributes )#if( $listOfDeletedField.contains($attrib.name) ), false#end#end);
				if (existingEntity == null) {
					response.setStatus(functionalError.DATA_NOT_EXIST("${fn.uncapitalize($entity.name)} -> " + dto.${field.getter}(), locale));
					response.setHasError(true);
					return response;
				}
#end

				// -----------------------------------------------------------------------
				// ----------- CHECK IF DATA IS USED
				// -----------------------------------------------------------------------

#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityOneToMany() || $link.isCardinalityManyToMany())
#set( $entityFk = $link.targetEntity)
#foreach( $field in $entityFk.getAttributesByCriteria($const.IN_SELECTED_LINKS))
#if($field.referencedEntity == $entity.name)
#set($refFieldName = $field.name)
#end
#end
				// ${fn.uncapitalize($entityFk.name)}
				$link.fieldType $link.fieldName = ${fn.uncapitalize($entityFk.name)}Repository.findBy$fn.capitalize($refFieldName)(existingEntity.#foreach( $attrib in $entity.keyAttributes )$attrib.getter#end()#foreach( $attrib in $entityFk.nonKeyAttributes )#if( $listOfDeletedField.contains($attrib.name) ), false#end#end);
				if ($link.fieldName != null && !${link.fieldName}.isEmpty()){
					response.setStatus(functionalError.DATA_NOT_DELETABLE("(" + ${link.fieldName}.size() + ")", locale));
					response.setHasError(true);
					return response;
				}
#end
#end


#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_LINKS ))
#if( $field.name == "deletedAt" )
				existingEntity.${field.setter}(Utilities.getCurrentDate());
#end
#if( $listOfDeletedField.contains($field.name) )
				existingEntity.${field.setter}(true);
#end
#if( $field.name == "deletedBy" )
				existingEntity.${field.setter}(request.getUser());
#end
#end
				items.add(existingEntity);
			}

			if (!items.isEmpty()) {
				// supprimer les donnees en base
#if($hasDeletedField)
				${fn.uncapitalize($repositoryName)}.saveAll((Iterable<${entity.name}>) items);
#else
				${fn.uncapitalize($repositoryName)}.deleteAll((Iterable<${entity.name}>) items);
#end

				response.setHasError(false);
			}

			slf4jLogger.info("----end delete ${entity.name}-----");
		} catch (PermissionDeniedDataAccessException e) {
			exceptionUtils.PERMISSION_DENIED_DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (DataAccessResourceFailureException e) {
			exceptionUtils.DATA_ACCESS_RESOURCE_FAILURE_EXCEPTION(response, locale, e);
		} catch (DataAccessException e) {
			exceptionUtils.DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		} finally {
			if (response.isHasError() && response.getStatus() != null) {
				slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
				throw new RuntimeException(response.getStatus().getCode() + ";" + response.getStatus().getMessage());
			}
		}
		return response;
	}

	/**
	 * get ${entity.name} by using ${dto} as object.
	 * 
	 * @param request
	 * @return response
	 * 
	 */
	@SuppressWarnings("unused")
	@Override
	public Response<${entity.name}Dto> getByCriteria(Request<${entity.name}Dto> request, Locale locale) {
		slf4jLogger.info("----begin get ${entity.name}-----");
		
		response = new Response<${entity.name}Dto>();
		
		try {
			Map<String, java.lang.Object> fieldsToVerifyUser = new HashMap<String, java.lang.Object>();
			fieldsToVerifyUser.put("user", request.getUser());
			if (!Validate.RequiredValue(fieldsToVerifyUser).isGood()) {
				response.setStatus(functionalError.FIELD_EMPTY(Validate.getValidate().getField(), locale));
				response.setHasError(true);
				return response;
			}

#if( $entity.name != $userEntity)
			Response<${userEntity}Dto> userResponse = ${fn.uncapitalize($userBusiness)}.isGranted(request.getUser(), FunctionalityEnum.VIEW_${entity_name}.getValue(), locale);
#else
			Response<${userEntity}Dto> userResponse = isGranted(request.getUser(), FunctionalityEnum.VIEW_${entity_name}.getValue(), locale);
#end
			if (userResponse.isHasError()) {
				response.setHasError(true);
				response.setStatus(userResponse.getStatus());
				return response;
			}

			List<${entity.name}> items = null;
			items = ${fn.uncapitalize($repositoryName)}.getByCriteria(request, em, locale);
			if (items != null && !items.isEmpty()) {
				List<${dto}> itemsDto = (Utilities.isTrue(request.getIsSimpleLoading())) ? ${transformerName}.INSTANCE.toLiteDtos(items) : ${transformerName}.INSTANCE.toDtos(items);

				final int size = items.size();
				List<String>  listOfError      = Collections.synchronizedList(new ArrayList<String>());
				itemsDto.parallelStream().forEach(dto -> {
					try {
						dto = getFullInfos(dto, size, request.getIsSimpleLoading(), locale);
					} catch (Exception e) {
						listOfError.add(e.getMessage());
						e.printStackTrace();
					}
				});
				if (Utilities.isNotEmpty(listOfError)) {
					Object[] objArray = listOfError.stream().distinct().toArray();
					throw new RuntimeException(StringUtils.join(objArray, ", "));
				}
				response.setItems(itemsDto);
				response.setCount(${fn.uncapitalize($repositoryName)}.count(request, em, locale));
				response.setHasError(false);
			} else {
				response.setStatus(functionalError.DATA_EMPTY("${fn.uncapitalize($entity.name)}", locale));
				response.setHasError(false);
				return response;
			}

			slf4jLogger.info("----end get ${entity.name}-----");
		} catch (PermissionDeniedDataAccessException e) {
			exceptionUtils.PERMISSION_DENIED_DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (DataAccessResourceFailureException e) {
			exceptionUtils.DATA_ACCESS_RESOURCE_FAILURE_EXCEPTION(response, locale, e);
		} catch (DataAccessException e) {
			exceptionUtils.DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		} finally {
			if (response.isHasError() && response.getStatus() != null) {
				slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
				throw new RuntimeException(response.getStatus().getCode() + ";" + response.getStatus().getMessage());
			}
		}
		return response;
	}

	/**
	 * get full ${entity.name}Dto by using ${entity.name} as object.
	 * 
	 * @param dto
	 * @param size
	 * @param isSimpleLoading
	 * @param locale
	 * @return
	 * @throws Exception
	 */
	private ${dto} getFullInfos(${dto} dto, Integer size, Boolean isSimpleLoading, Locale locale) throws Exception {
		// put code here

		if (Utilities.isTrue(isSimpleLoading)) {
			return dto;
		}
		if (size > 1) {
			return dto;
		}

		return dto;
	}

#if ($entity.name == $userEntity)
	/**
	 * 
	 * @param userId
	 * @param functionalityCode
	 * @param locale
	 * @return
	 */
    public Response<${entity.name}Dto> isGranted(Integer userId, String functionalityCode, Locale locale){
		slf4jLogger.info("----begin get isGranted-----");

		response = new Response<${entity.name}Dto>();

		try {
			$entity.name currentUser = ${userRepositoryFieldName}.findOne(userId, false);
			if (currentUser == null) {
				response.setStatus(functionalError.DATA_NOT_EXIST("Utilisateur -> " + userId, locale));
				response.setHasError(true);
				return response;
			}

			if (Utilities.isTrue(currentUser.getLocked())) {
				response.setStatus(functionalError.REQUEST_FAIL("L'utilisateur "+currentUser.getLogin()+" est verouille(e)" , locale));
				response.setHasError(true);
				return response;
 			}
    		
			if (Utilities.isFalse(currentUser.getIsSuperAdmin())) {
//				if (Utilities.notBlank(functionalityCode)) {
//					Functionality functionality = roleFunctionalityRepository.isGranted(currentUser.getRole().getId(), functionalityCode ,false);
//					if (functionality == null) {
//						response.setHasError(true);
//						response.setStatus(functionalError.USER_NOT_GRANTED("", locale));
//						return response;
//					}
//				}
			}

			response.setHasError(false);
			slf4jLogger.info("----end get isGranted-----");

		} catch (PermissionDeniedDataAccessException e) {
			exceptionUtils.PERMISSION_DENIED_DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (DataAccessResourceFailureException e) {
			exceptionUtils.DATA_ACCESS_RESOURCE_FAILURE_EXCEPTION(response, locale, e);
		} catch (DataAccessException e) {
			exceptionUtils.DATA_ACCESS_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		} finally {
			if (response.isHasError() && response.getStatus() != null) {
				slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
				throw new RuntimeException(response.getStatus().getCode() + ";" + response.getStatus().getMessage());
			}
		}

		return response;
	}

  #end
}
